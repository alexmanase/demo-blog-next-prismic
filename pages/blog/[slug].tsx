import type { NextPage } from "next";
import Head from "next/head";
import React from "react";
import { Client } from "../../prismic/prismic";
import Prismic from "@prismicio/client";

import { RichText } from "prismic-reactjs";
import { htmlSerializer } from "../../prismic/htmlSerializer";
import BlogPostLayout from "../../layouts/BlogPostLayout";
import Image from "next/image";

export async function getStaticPaths() {
  return {
    paths: [],
    fallback: true,
  };
}

export async function getStaticProps(context: any) {
  const document = await Client.getByUID("blog-post", context.params.slug, {});
  const { results } = await Client.query(
    Prismic.Predicates.at("document.type", "blog-post")
  );
  return {
    props: {
      document,
      blogPosts: results,
    },
  };
}

const Home: NextPage = ({ document, blogPosts }: any) => {
  if (!document) {
    return (
      <BlogPostLayout posts={[]}>
        <div>loading...</div>
      </BlogPostLayout>
    );
  }
  return (
    <div>
      <Head>
        <title>{document?.data.title[0].text}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <BlogPostLayout posts={blogPosts}>
        <main>
          <div className="prose prose-sm lg:prose-base prose-img:rounded-xl max-w-none">
            <div className="mb-6 rounded-3xl shadow-lg overflow-hidden">
              {document && document.data.image && (
                <Image
                  priority
                  src={document.data.image.url}
                  alt={document.data.image.alt}
                  layout="responsive"
                  width={7}
                  height={4}
                />
              )}
            </div>
            <h1>{document.data.title[0].text}</h1>
            <RichText
              render={document.data.body[0].primary.text}
              htmlSerializer={htmlSerializer}
            />
          </div>
        </main>
      </BlogPostLayout>
    </div>
  );
};

export default Home;
